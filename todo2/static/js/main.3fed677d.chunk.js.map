{"version":3,"sources":["logo.svg","components/TodoForms.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TodoForm","state","title","responsible","description","priority","handleInputChange","bind","handleSubmit","e","preventDefault","this","props","onAddTodo","setState","target","value","name","console","log","className","onSubmit","type","onChange","placeholder","Component","App","todos","handleAddTodo","todo","index","window","confirm","filter","i","map","onClick","removeTodo","href","length","src","logo","alt","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kGAAAA,EAAOC,QAAU,IAA0B,kC,2iBC0F5BC,E,YAvFb,aAAgB,IAAD,8BACb,+CACKC,MAAQ,CACXC,MAAO,GACPC,YAAa,GACbC,YAAa,GACbC,SAAU,OAEZ,EAAKC,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBACzB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBATP,E,0EAYFE,GACXA,EAAEC,iBACFC,KAAKC,MAAMC,UAAUF,KAAKV,OAC1BU,KAAKG,SAAS,CACZZ,MAAO,GACPC,YAAa,GACbC,YAAa,GACbC,SAAU,U,wCAIII,GAAI,IAAD,EACGA,EAAEM,OAAjBC,EADY,EACZA,MAAOC,EADK,EACLA,KACdC,QAAQC,IAAIH,EAAOC,GACnBN,KAAKG,SAAL,eACGG,EAAOD,M,+BAKV,OACE,yBAAKI,UAAU,QACb,0BAAMC,SAAUV,KAAKH,aAAcY,UAAU,aAC3C,yBAAKA,UAAU,cACb,2BACEE,KAAK,OACLL,KAAK,QACLG,UAAU,eACVJ,MAAOL,KAAKV,MAAMC,MAClBqB,SAAUZ,KAAKL,kBACfkB,YAAY,WAGhB,yBAAKJ,UAAU,cACb,2BACEE,KAAK,OACLL,KAAK,cACLG,UAAU,eACVJ,MAAOL,KAAKV,MAAME,YAClBoB,SAAUZ,KAAKL,kBACfkB,YAAY,iBAGhB,yBAAKJ,UAAU,cACb,2BACEE,KAAK,OACLL,KAAK,cACLG,UAAU,eACVJ,MAAOL,KAAKV,MAAMG,YAClBmB,SAAUZ,KAAKL,kBACfkB,YAAY,iBAGhB,yBAAKJ,UAAU,cACb,4BACIH,KAAK,WACLG,UAAU,eACVJ,MAAOL,KAAKV,MAAMI,SAClBkB,SAAUZ,KAAKL,mBAEjB,uCACA,0CACA,0CAGJ,4BAAQgB,KAAK,SAASF,UAAU,mBAAhC,c,GA9EaK,aCwFRC,E,YAjFb,aAAe,IAAD,8BACZ,+CACKzB,MAAQ,CACX0B,WAEF,EAAKC,cAAgB,EAAKA,cAAcrB,KAAnB,gBALT,E,2EAQAsB,GACZlB,KAAKG,SAAS,CACZa,MAAM,GAAD,mBAAMhB,KAAKV,MAAM0B,OAAjB,CAAwBE,Q,iCAItBC,GACLC,OAAOC,QAAQ,wCACjBrB,KAAKG,SAAS,CACZa,MAAOhB,KAAKV,MAAM0B,MAAMM,QAAO,SAACxB,EAAEyB,GAChC,OAAOA,IAAMJ,S,+BAMX,IAAD,OACDH,EAAQhB,KAAKV,MAAM0B,MAAMQ,KAAI,SAACN,EAAMK,GACxC,OACE,yBAAKd,UAAU,YACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,eACb,4BAAKS,EAAK3B,OACV,0BAAMkB,UAAU,sCACbS,EAAKxB,WAGV,yBAAKe,UAAU,aACb,2BAAIS,EAAKzB,aACT,2BAAG,8BAAOyB,EAAK1B,eAEjB,yBAAKiB,UAAU,eACb,4BACEA,UAAU,iBACVgB,QAAS,EAAKC,WAAW9B,KAAK,EAAM2B,IAFtC,gBAWZ,OACE,yBAAKd,UAAU,OACb,yBAAKA,UAAU,8BACb,uBAAGkB,KAAK,GAAGlB,UAAU,cAArB,QAEI,0BAAMA,UAAU,qCACZT,KAAKV,MAAM0B,MAAMY,UAK3B,yBAAKnB,UAAU,aACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,YACf,kBAAC,EAAD,CAAUP,UAAWF,KAAKiB,iBAG1B,yBAAKR,UAAU,YACb,yBAAKA,UAAU,OACbO,MAKN,yBAAKa,IAAKC,IAAMrB,UAAU,WAAWsB,IAAI,c,GA5E/BjB,aCIEkB,QACW,cAA7BZ,OAAOa,SAASC,UAEe,UAA7Bd,OAAOa,SAASC,UAEhBd,OAAOa,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3fed677d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\n\r\nclass TodoForm extends Component {\r\n  constructor () {\r\n    super();\r\n    this.state = {\r\n      title: '',\r\n      responsible: '',\r\n      description: '',\r\n      priority: 'low'\r\n    };\r\n    this.handleInputChange = this.handleInputChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleSubmit(e) {\r\n    e.preventDefault();\r\n    this.props.onAddTodo(this.state);\r\n    this.setState({\r\n      title: '',\r\n      responsible: '',\r\n      description: '',\r\n      priority: 'low'\r\n    });\r\n  }\r\n\r\n  handleInputChange(e) {\r\n    const {value, name} = e.target;\r\n    console.log(value, name);\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"card\">\r\n        <form onSubmit={this.handleSubmit} className=\"card-body\">\r\n          <div className=\"form-group\">\r\n            <input\r\n              type=\"text\"\r\n              name=\"title\"\r\n              className=\"form-control\"\r\n              value={this.state.title}\r\n              onChange={this.handleInputChange}\r\n              placeholder=\"Title\"\r\n              />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <input\r\n              type=\"text\"\r\n              name=\"responsible\"\r\n              className=\"form-control\"\r\n              value={this.state.responsible}\r\n              onChange={this.handleInputChange}\r\n              placeholder=\"Responsible\"\r\n              />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <input\r\n              type=\"text\"\r\n              name=\"description\"\r\n              className=\"form-control\"\r\n              value={this.state.description}\r\n              onChange={this.handleInputChange}\r\n              placeholder=\"Description\"\r\n              />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <select\r\n                name=\"priority\"\r\n                className=\"form-control\"\r\n                value={this.state.priority}\r\n                onChange={this.handleInputChange}\r\n              >\r\n              <option>low</option>\r\n              <option>medium</option>\r\n              <option>high</option>\r\n            </select>\r\n          </div>\r\n          <button type=\"submit\" className=\"btn btn-primary\">\r\n            Save\r\n          </button>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default TodoForm;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport { todos } from './todos.json';\n\nimport TodoForm from './components/TodoForms';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      todos\n    };\n    this.handleAddTodo = this.handleAddTodo.bind(this);\n  }\n\n  handleAddTodo(todo) {\n    this.setState({\n      todos: [...this.state.todos, todo]\n    })\n  }\n\n  removeTodo(index) {\n    if (window.confirm('Are you sure you want to delete it?')) {\n      this.setState({\n        todos: this.state.todos.filter((e,i) => {\n          return i !== index\n        })\n      })\n    }\n  }\n\n  render() {\n    const todos = this.state.todos.map((todo, i) => {\n      return (\n        <div className=\"col-md-4\">\n          <div className=\"card mt-4\">\n            <div className=\"card-header\">\n              <h3>{todo.title}</h3>\n              <span className=\"badge badge-pill badge-danger ml-2\">\n                {todo.priority}\n              </span>\n            </div>\n            <div className=\"card-body\">\n              <p>{todo.description}</p>\n              <p><mark>{todo.responsible}</mark></p>\n            </div>\n            <div className=\"card-footer\">\n              <button\n                className=\"btn btn-danger\"\n                onClick={this.removeTodo.bind(this, i)}\n              >\n                Delete\n              </button>\n            </div>\n        </div>\n        </div>\n      )\n    });\n  return (\n    <div className=\"App\" >\n      <nav className=\"navbar navbar-dark bg-dark\">\n        <a href=\"\" className=\"text-white\">\n            Tasks\n            <span className=\"badge badge-pill badge-light ml-2\">\n              { this.state.todos.length }\n            </span>\n        </a>\n      </nav>\n\n      <div className=\"container\">\n        <div className=\"row mt-4\">\n          <div className=\"col-md-3\">\n          <TodoForm onAddTodo={this.handleAddTodo}/>\n         \n          </div>\n          <div className=\"col-md-9\">\n            <div className=\"row\">\n            { todos }\n            </div>\n          </div>\n        </div>\n      </div>\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        \n    </div>\n  );\n}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}