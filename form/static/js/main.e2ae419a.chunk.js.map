{"version":3,"sources":["components/Conditional.js","components/FormComponent.js","components/FormContainer.js","App.js","serviceWorker.js","index.js"],"names":["Conditional","FormComponent","props","name","value","data","firstName","onChange","handleChange","placeholder","lastName","age","type","checked","gender","destination","isVegan","isKosher","isLactoseFree","Form","state","dietaryRestrictions","bind","event","target","this","setState","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wPAQeA,I,iDC4FAC,MAnGf,SAAuBC,GACnB,OACI,8BACE,8BACE,2BAAOC,KAAK,YACZC,MAAOF,EAAMG,KAAKC,UAClBC,SAAUL,EAAMM,aAChBC,YAAY,eAEZ,6BACA,2BAAON,KAAK,WACZC,MAAOF,EAAMG,KAAKK,SAClBH,SAAUL,EAAMM,aAChBC,YAAY,cAEZ,6BACA,2BAAON,KAAK,MACZC,MAAOF,EAAMG,KAAKM,IAClBJ,SAAUL,EAAMM,aAChBC,YAAY,QAAO,6BACnB,6BACA,+BACE,2BACEG,KAAK,QACLT,KAAK,SACLC,MAAM,OACNS,QAA+B,SAAtBX,EAAMG,KAAKS,OACpBP,SAAUL,EAAMM,eANpB,SASA,6BACA,+BACE,2BACEI,KAAK,QACLT,KAAK,SACLC,MAAM,SACNS,QAA+B,WAAtBX,EAAMG,KAAKS,OACpBP,SAAUL,EAAMM,eANpB,WASA,6BACA,4BACAJ,MAAOF,EAAMG,KAAKU,YAClBZ,KAAK,cACLI,SAAUL,EAAMM,cAEZ,4BAAQJ,MAAM,IAAd,qCACA,4BAAQA,MAAM,WAAd,WACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,cAAd,cACA,4BAAQA,MAAM,cAAd,eAEJ,6BACA,+BACE,2BACEQ,KAAK,WACLT,KAAK,UACLI,SAAUL,EAAMM,aAChBK,QAASX,EAAMG,KAAKW,UALxB,WAQA,6BACA,+BACE,2BACEJ,KAAK,WACLT,KAAK,WACLI,SAAUL,EAAMM,aAChBK,QAASX,EAAMG,KAAKY,WALxB,YAOQ,6BACR,+BACE,2BACEL,KAAK,WACLT,KAAK,gBACLI,SAAUL,EAAMM,aAChBK,QAASX,EAAMG,KAAKa,gBALxB,kBASA,6BACA,2CAEF,6BACA,mDACA,yCAAehB,EAAMG,KAAKC,UAA1B,IAAsCJ,EAAMG,KAAKK,UACjD,wCAAcR,EAAMG,KAAKM,KACzB,2CAAiBT,EAAMG,KAAKS,QAC5B,gDAAsBZ,EAAMG,KAAKU,aACjC,uDAEE,qCAAWb,EAAMG,KAAKW,QAAU,MAAQ,MACzC,uCAAad,EAAMG,KAAKY,SAAW,MAAQ,MAC1C,4CAAkBf,EAAMG,KAAKa,cAAgB,MAAQ,SCvDlDC,E,YAlCb,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXd,UAAW,GACXI,SAAU,GACVC,IAAK,GACLG,OAAQ,GACRC,YAAa,GACbM,oBAAqB,CACnBL,SAAS,EACTC,UAAU,EACVC,eAAe,IAGnB,EAAKV,aAAe,EAAKA,aAAac,KAAlB,gBAdR,E,0EAiBDC,GAAQ,IAAD,EACmBA,EAAMC,OAApCrB,EADW,EACXA,KAAMC,EADK,EACLA,MADK,EACEQ,KADF,EACQC,QAC1BY,KAAKC,SAAL,eACGvB,EAAQC,M,+BAKX,OACA,kBAAC,EAAD,CACEI,aAAciB,KAAKjB,aACnBH,KAAMoB,KAAKL,Y,GA7BEO,aC8CJC,MANf,WACE,OACE,kBAAC,EAAD,OCjCgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e2ae419a.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Conditional(props) {\r\n    return <h1>Some cool stuff about conditional rendering</h1>\r\n    }\r\n  \r\n\r\n\r\nexport default Conditional;","import React, { Component } from \"react\"\r\nfunction FormComponent(props) {\r\n    return (\r\n        <main>\r\n          <form>\r\n            <input name=\"firstName\" \r\n            value={props.data.firstName} \r\n            onChange={props.handleChange} \r\n            placeholder=\"First Name\"\r\n            />\r\n            <br />\r\n            <input name=\"lastName\" \r\n            value={props.data.lastName} \r\n            onChange={props.handleChange} \r\n            placeholder=\"Last Name\"\r\n            />\r\n            <br />\r\n            <input name=\"age\" \r\n            value={props.data.age} \r\n            onChange={props.handleChange} \r\n            placeholder=\"Age\"/><br />\r\n            <br />\r\n            <label>\r\n              <input \r\n                type=\"radio\"\r\n                name=\"gender\"\r\n                value=\"male\"\r\n                checked={props.data.gender === \"male\"}\r\n                onChange={props.handleChange}\r\n               /> Male\r\n            </label>\r\n            <br />\r\n            <label>\r\n              <input \r\n                type=\"radio\"\r\n                name=\"gender\"\r\n                value=\"female\"\r\n                checked={props.data.gender === \"female\"}\r\n                onChange={props.handleChange}\r\n               /> Female\r\n            </label>\r\n            <br />\r\n            <select \r\n            value={props.data.destination} \r\n            name=\"destination\" \r\n            onChange={props.handleChange}\r\n            >\r\n                <option value=\"\">-- Please Choose a destination --</option>\r\n                <option value=\"germany\">Germany</option>\r\n                <option value=\"norway\">Norway</option>\r\n                <option value=\"north pole\">North Pole</option>\r\n                <option value=\"south pole\">South Pole</option>\r\n            </select>\r\n            <br />\r\n            <label>\r\n              <input \r\n                type=\"checkbox\"\r\n                name=\"isVegan\"\r\n                onChange={props.handleChange}\r\n                checked={props.data.isVegan}\r\n              /> Vegan?\r\n            </label>\r\n            <br />\r\n            <label>\r\n              <input \r\n                type=\"checkbox\"\r\n                name=\"isKosher\"\r\n                onChange={props.handleChange}\r\n                checked={props.data.isKosher}\r\n              /> Kosher?\r\n            </label><br />\r\n            <label>\r\n              <input \r\n                type=\"checkbox\"\r\n                name=\"isLactoseFree\"\r\n                onChange={props.handleChange}\r\n                checked={props.data.isLactoseFree}\r\n              /> Lactose Free?\r\n            </label>\r\n  \r\n            <br />\r\n            <button>Submit</button>\r\n          </form>\r\n          <hr />\r\n          <h2>Entered information</h2>\r\n          <p>Your name: {props.data.firstName} {props.data.lastName}</p>\r\n          <p>Your age: {props.data.age}</p>\r\n          <p>Your gender: {props.data.gender}</p>\r\n          <p>Your destination: {props.data.destination}</p>\r\n          <p>\r\n            Your dietary restriction:\r\n            <p>Vegan: {props.data.isVegan ? \"Yes\" : \"No\"}</p>\r\n           <p> Kosher: {props.data.isKosher ? \"Yes\" : \"No\"}</p>\r\n            <p>Lactose Free: {props.data.isLactoseFree ? \"Yes\" : \"No\"}</p>\r\n  \r\n          </p>\r\n        </main>\r\n      )\r\n}\r\n\r\nexport default FormComponent;","import React, {Component} from 'react';\r\nimport FormComponent from './FormComponent';\r\n\r\nclass Form extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      firstName: \"\",\r\n      lastName: \"\",\r\n      age: \"\",\r\n      gender: \"\",\r\n      destination: \"\",\r\n      dietaryRestrictions: {\r\n        isVegan: false,\r\n        isKosher: false,\r\n        isLactoseFree: false\r\n      }\r\n    }\r\n    this.handleChange = this.handleChange.bind(this)\r\n  }\r\n\r\n  handleChange(event) {\r\n    const {name, value, type, checked} = event.target;\r\n    this.setState ({\r\n      [name] : value\r\n    })\r\n  }\r\n\r\n  render () {\r\n    return (\r\n    <FormComponent\r\n      handleChange={this.handleChange}\r\n      data={this.state}\r\n    />    \r\n    )\r\n  }\r\n}\r\n\r\nexport default Form;\r\n","import React, {Component} from 'react';\nimport './App.css';\nimport TodoItem from './components/TodoItem';\nimport todosData from './components/todosData';\nimport Conditional from './components/Conditional';\nimport Form from './components/FormContainer';\n\n/*class App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      todos: todosData\n    }\n    this.handleChange = this.handleChange.bind(this)\n  }\n  handleChange(id) {\n    this.setState(prevState => {\n      const updatedTodos = prevState.todos.map(todo =>{\n        if (todo.id === id) {\n          todo.completed = !todo.completed\n        }\n        return todo \n      })\n      return {\n        todos: updatedTodos\n      }\n    })\n  }\n  render(){\n    const TodoItems = this.state.todos.map(item => <TodoItem key={item.id} item={item}\n      handleChange={this.handleChange}\n    />)\n \n    return (\n      <div className=\"todo-list\">\n         {TodoItems}\n      </div>\n    )\n  }\n  \n}\n*/\n\nfunction App() {\n  return (\n    <Form />\n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}